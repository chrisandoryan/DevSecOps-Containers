pipeline {
    agent any

    environment {
        GIT_COMMIT_SHORT = "${sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()}"
        DOCKER_USERNAME = "chrisandoryan"
        DOCKER_IMAGE_NAME = "strustek-test-deployment"
        TARGET_SERVER_HOSTNAME = "18.140.198.207"
        // Obtained from SonarQube platform when creating new project.
        SONARQUBE_PROJECT_KEY = "Strust-Supervision-Sandbox"
        
        // ======== Jenkins Tools ========
        // Obtained from Manage Jenkins > Global Tool Configuration
        SONARQUBE_TOOL = "SonarQube Scanner - Strust Supervision"

        // ===============================
        
        // ===== Jenkins Credentials =====
        // Obtained from Manage Jenkins > Credentials
        TARGET_SERVER_SSH_CREDENTIALS_ID = "KIMS-POSA-Staging-Server"
        DOCKERHUB_CREDENTIALS_ID = ""
        SONARQUBE_CREDENTIALS_ID = "Strust-Supervision-Sonarqube"
        GITHUB_CREDENTIALS_ID = "The-Questlabs-ID"
        
        // ===============================
    }

    stages {
        stage('Checkout') {
            steps {
                git(url: 'https://github.com/Questlabs-ID/devsecops-sandbox', branch: 'main', credentialsId: env.GITHUB_CREDENTIALS_ID)
            }
        }
        stage('Sonarqube Analysis') {
            environment {
                scannerHome = tool env.SONARQUBE_TOOL;
            }
            steps {
                withSonarQubeEnv(credentialsId: env.SONARQUBE_CREDENTIALS_ID, installationName: 'Strust Supervision Sonarqube') {
                    sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${env.SONARQUBE_PROJECT_KEY}"
                }
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Create Dockerfile') {
            steps {
                writeFile file: 'Dockerfile', text: '''
                FROM php:7.4-fpm

                # Install required extensions and dependencies
                RUN apt-get update && apt-get install -y \
                    libpng-dev \
                    libjpeg-dev \
                    libfreetype6-dev \
                    libzip-dev \
                    unzip \
                    git \
                    && docker-php-ext-configure gd --with-freetype --with-jpeg \
                    && docker-php-ext-install -j$(nproc) gd \
                    && docker-php-ext-install pdo_mysql zip

                # Install Composer
                COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

                # Set working directory
                WORKDIR /var/www/html

                # Copy application files
                COPY . /var/www/html

                # Install dependencies
                RUN composer install --no-interaction --no-dev --optimize-autoloader

                # Set permissions
                RUN chown -R www-data:www-data /var/www/html/storage
                RUN chown -R www-data:www-data /var/www/html/bootstrap/cache
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${env.DOCKER_USERNAME}/${env.DOCKER_IMAGE_NAME}:${env.GIT_COMMIT_SHORT} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([string(credentialsId: env.DOCKERHUB_CREDENTIALS_ID, variable: 'DOCKERHUB_TOKEN')]) {
                    sh "echo '${DOCKERHUB_TOKEN}' | docker login -u ${env.DOCKER_USERNAME} --password-stdin"
                    sh "docker push ${env.DOCKER_USERNAME}/${env.DOCKER_IMAGE_NAME}:${env.GIT_COMMIT_SHORT}"
                }
            }
        }

        stage('Deploy Laravel Application') {
            steps {
                sshagent([env.TARGET_SERVER_SSH_CREDENTIALS_ID]) {
                    // Replace 'your-deployment-server' with your server's IP or domain
                    sh "ssh ${env.TARGET_SERVER_HOSTNAME} 'docker pull ${env.DOCKER_USERNAME}/${env.DOCKER_IMAGE_NAME}:${env.GIT_COMMIT_SHORT}'"
                    sh "ssh ${env.TARGET_SERVER_HOSTNAME} 'docker-compose down && docker-compose up -d --force-recreate'"
                }
            }
        }
    }

    post {
        failure {
            warnError('Something went wrong with this build. Let\'s go fix it.') {
                // some block
            }
        }
    }
}