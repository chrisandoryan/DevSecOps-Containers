pipeline {
    agent any

    environment {
        GIT_COMMIT_SHORT = "${sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()}"
        DOCKER_USERNAME = "strust"
        DOCKER_IMAGE_NAME = "strustek-test-deployment"
        DOCKER_REGISTRY = "registry.strust.id"
        
        TARGET_SERVER = "18.140.198.207"
        TARGET_SERVER_USERNAME = "ubuntu"
        SONARQUBE_INSTALLATION = "strust-sonarqube"
        // Obtained from SonarQube platform when creating new project.
        SONARQUBE_PROJECT_KEY = "Strust-Sandbox-Deployment"
        
        // ======== Jenkins Tools ========
        // Obtained from Manage Jenkins > Global Tool Configuration
        SONARQUBE_SCANNER = "sonarqube-scanner"

        // ===============================
        
        // ===== Jenkins Credentials =====
        // Obtained from Manage Jenkins > Credentials
        TARGET_SERVER_SSH_CREDENTIALS_ID = "kims-staging-ssh-creds"
        DOCKERHUB_CREDENTIALS_ID = "strust-docker-registry-creds"
        SONARQUBE_CREDENTIALS_ID = "global-sonarqube-token"
        GITHUB_CREDENTIALS_ID = "questlabs-org-github-creds"
        
        // ===============================
    }

    stages {
        stage('Checkout') {
            steps {
                git(url: 'https://github.com/Questlabs-ID/devsecops-sandbox', branch: 'main', credentialsId: env.GITHUB_CREDENTIALS_ID)
            }
        }
        stage('Sonarqube Analysis') {
            environment {
                scannerHome = tool env.SONARQUBE_SCANNER;
            }
            steps {
                withSonarQubeEnv(credentialsId: env.SONARQUBE_CREDENTIALS_ID, installationName: env.SONARQUBE_INSTALLATION) {
                    sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${env.SONARQUBE_PROJECT_KEY}"
                }
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Create Dockerfile') {
            steps {
                writeFile file: 'Dockerfile', text: '''
                FROM php:7.4.26-fpm-alpine3.15

                ENV NGINX_VERSION 1.20.2
                ENV NJS_VERSION   0.7.0
                ENV PKG_RELEASE   1

                # install necessary alpine packages
                RUN apk update && apk add --no-cache \
                    zip \
                    unzip \
                    dos2unix \
                    supervisor \
                    libpng-dev \
                    libzip-dev \
                    freetype-dev \
                    $PHPIZE_DEPS \
                    libjpeg-turbo-dev
                    
                # compile native PHP packages
                RUN docker-php-ext-install \
                    gd \
                    pcntl \
                    bcmath \
                    mysqli \
                    pdo_mysql
                    
                # configure packages
                RUN docker-php-ext-configure gd --with-freetype --with-jpeg

                # install additional packages from PECL
                RUN pecl install zip && docker-php-ext-enable zip \
                    && pecl install igbinary && docker-php-ext-enable igbinary \
                    && yes | pecl install redis && docker-php-ext-enable redis
                    
                # install nginx
                RUN set -x \
                    && nginxPackages=" \
                        nginx=${NGINX_VERSION}-r${PKG_RELEASE} \
                        nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE} \
                        nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE} \
                        nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE} \
                        nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE} \
                    " \
                    set -x \
                    && KEY_SHA512="e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin" \
                    && apk add --no-cache --virtual .cert-deps \
                        openssl \
                    && wget -O /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub \
                    && if [ "$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)" = "$KEY_SHA512" ]; then \
                        echo "key verification succeeded!"; \
                        mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/; \
                    else \
                        echo "key verification failed!"; \
                        exit 1; \
                    fi \
                    && apk del .cert-deps \
                    && apk add -X "https://nginx.org/packages/alpine/v$(egrep -o '^[0-9]+\.[0-9]+' /etc/alpine-release)/main" --no-cache $nginxPackages
                    
                RUN ln -sf /dev/stdout /var/log/nginx/access.log \
                    && ln -sf /dev/stderr /var/log/nginx/error.log
                    
                # copy supervisor configuration
                COPY ./docker/supervisord.conf /etc/supervisord.conf

                EXPOSE 80

                # run supervisor
                CMD ["/usr/bin/supervisord", "-n", "-c", "/etc/supervisord.conf"]
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${env.DOCKER_REGISTRY}/${env.DOCKER_IMAGE_NAME}:${env.GIT_COMMIT_SHORT} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "echo $PASSWORD | docker login -u ${env.DOCKER_USERNAME} --password-stdin ${env.DOCKER_REGISTRY}"
                    sh "docker push ${env.DOCKER_REGISTRY}/${env.DOCKER_IMAGE_NAME}:${env.GIT_COMMIT_SHORT}"
                }
            }
        }

        stage('Deploy Laravel Application') {
            steps {
                // NOTE: you have to manually log in the target server to the designated Docker registry first.
                sshagent([env.TARGET_SERVER_SSH_CREDENTIALS_ID]) {
                    sh "ssh ${env.TARGET_SERVER_USERNAME}@${env.TARGET_SERVER} 'docker pull ${env.DOCKER_REGISTRY}/${env.DOCKER_IMAGE_NAME}:${env.GIT_COMMIT_SHORT}'"
                    sh "ssh ${env.TARGET_SERVER_USERNAME}@${env.TARGET_SERVER} 'docker run -d -p 8000:80 ${env.DOCKER_REGISTRY}/${env.DOCKER_IMAGE_NAME}:${env.GIT_COMMIT_SHORT} --name devsecops-sandbox'"
                }
            }
        }
    }

    post {
        failure {
            warnError('Something went wrong with this build. Let\'s go fix it.') {
                // some block
            }
        }
    }
}